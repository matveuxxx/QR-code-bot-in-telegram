import qrcode
import telebot
from io import BytesIO
import json
import datetime
import os
# –í–ù–ò–ú–ê–ù–ò–ï –ó–ê–ú–ï–ù–ò–¢–ï –¢–ì –ê–ô–î–ò –ê–î–ú–ò–ù–ê –° –ú–û–ï–ì–û –ù–ê –°–í–û–ô –ß–¢–û –Ø –£ –í–ê–° –ë–´–õ –î–û–°–¢–£–ü –ö –ö–û–ú–ê–ù–î–ï /users
TOKEN = '—Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞'
bot = telebot.TeleBot(TOKEN)
ADMIN_ID = 6820237306

users_data = {}

try:
    with open('users_data.json', 'r', encoding='utf-8') as f:
        users_data = json.load(f)
except:
    pass

def save_users_data():
    with open('users_data.json', 'w', encoding='utf-8') as f:
        json.dump(users_data, f, ensure_ascii=False, indent=2)

def get_russian_date():
    months = {
        1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
        5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
        9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
    }
    now = datetime.datetime.now()
    return f"{now.day} {months[now.month]} {now.year} –≥–æ–¥"

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = str(message.from_user.id)
    if user_id not in users_data:
        users_data[user_id] = {
            'first_name': message.from_user.first_name or '',
            'last_name': message.from_user.last_name or '',
            'username': message.from_user.username or '',
            'join_date': get_russian_date(),
            'links': []
        }
        save_users_data()
    
    welcome_text = "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤\n\nüìé –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±—É—é —Å—Å—ã–ª–∫—É, –∏ —è —Å–æ–∑–¥–∞–º QR-–∫–æ–¥\n\nüîó –ü—Ä–∏–º–µ—Ä: https://example.com"
    bot.send_message(message.chat.id, welcome_text)

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = "üìã –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±—É—é —Å—Å—ã–ª–∫—É\n2. –Ø —Å–æ–∑–¥–∞–º QR-–∫–æ–¥ –¥–ª—è —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏\n3. –°–∫–∞—á–∞–π QR-–∫–æ–¥ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –≥–¥–µ —É–≥–æ–¥–Ω–æ"
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['users'])
def send_users_file(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    now = datetime.datetime.now()
    filename = f"users_{now.day}.{now.month}.{now.year}.txt"
    
    with open(filename, 'w', encoding='utf-8-sig') as f:
        for user_id, user_data in users_data.items():
            first_name = user_data.get('first_name', '') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            last_name = user_data.get('last_name', '') or ''
            username = user_data.get('username', '') or '–ù–µ —É–∫–∞–∑–∞–Ω'
            join_date = user_data.get('join_date', '') or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            links = user_data.get('links', [])
            
            full_name = f"{first_name} {last_name}".strip()
            if not full_name:
                full_name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                
            f.write(f"–Ω–∏–∫ ({full_name}) : @{username}\n")
            f.write(f"–¥–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞ : {join_date}\n")
            f.write("–≤—Å–µ —Å—Å—ã–ª–∫–∏ \n")
            f.write("{ —Ç—É—Ç —ç—Ç–æ —Å–∫–æ–±–æ—á–∫–∏\n")
            for link in links:
                f.write(f"{link}\n")
            f.write("—Ç—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è\n")
            f.write("}\n\n")
    
    with open(filename, 'rb') as f:
        bot.send_document(message.chat.id, f, caption="üìä –§–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    
    os.remove(filename)

def is_url(text):
    return text.startswith(('http://', 'https://', 'www.'))

def generate_qr_code(url):
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(url)
    qr.make(fit=True)
    
    img = qr.make_image(fill_color="black", back_color="white")
    
    img_bytes = BytesIO()
    img.save(img_bytes, format='PNG')
    img_bytes.seek(0)
    
    return img_bytes

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    text = message.text.strip()
    user_id = str(message.from_user.id)
    
    if user_id not in users_data:
        users_data[user_id] = {
            'first_name': message.from_user.first_name or '',
            'last_name': message.from_user.last_name or '',
            'username': message.from_user.username or '',
            'join_date': get_russian_date(),
            'links': []
        }
    
    if is_url(text):
        try:
            if not text.startswith(('http://', 'https://')):
                text = 'https://' + text
            
            users_data[user_id]['links'].append(text)
            save_users_data()
            
            bot.send_message(message.chat.id, "üîÑ –°–æ–∑–¥–∞—é QR-–∫–æ–¥...")
            qr_image = generate_qr_code(text)
            
            bot.send_photo(message.chat.id, qr_image, caption=f"‚úÖ QR-–∫–æ–¥ –¥–ª—è —Å—Å—ã–ª–∫–∏:\n{text}")
            
        except Exception as e:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR-–∫–æ–¥–∞")
            
    else:
        if not text.startswith('/'):
            bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π URL")

if __name__ == '__main__':
    bot.polling(none_stop=True)
